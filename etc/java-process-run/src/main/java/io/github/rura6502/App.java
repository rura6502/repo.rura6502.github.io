/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.github.rura6502;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.ProcessBuilder.Redirect;
import java.nio.file.Files;
import java.util.stream.Stream;

public class App {
  public static void main(String[] args) throws IOException, InterruptedException {
    String[] cmdArr = new String[] { "C:/Users/abcd/Desktop/ffmpeg/bin/ffmpeg.exe", "-re","-f","lavfi","-i","color=c=black",
        "-f", "mpegts", "udp://localhost:3333" };
        runtime(cmdArr);

  
        getLiveProcess();
  }

  public static void runtime(String[] cmdArr) throws IOException, InterruptedException {
    Runtime runtime = Runtime.getRuntime();
    Process process = runtime.exec(cmdArr);
    System.out.println(process.pid());

    Thread closeChildThread = new Thread() {
      public void run() {
        System.out.println("terminate");
        process.destroyForcibly();
      }
    }; 
  }

  public static void processBuilder(String[] cmdArr) throws IOException, InterruptedException {
    ProcessBuilder builder = new ProcessBuilder(cmdArr);
    Process process = builder.start();
    System.out.println(process.pid());
  }

  public static void getLiveProcess() {
    Stream<ProcessHandle> liveProcesses = ProcessHandle.allProcesses();
    liveProcesses.filter(ProcessHandle::isAlive)
      .forEach(ph -> {
        System.out.println(ph.pid() + " : " + ph.info().command().get());
        if (ph.info().command().get().contains("ffmpeg")) {
          System.out.println("Pid : " + ph.pid() + " will be terminated");
          ph.destroyForcibly();
        }
      });
  }

}
